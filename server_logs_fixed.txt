warning: `/Users/zoujiaqing/.cargo/config` is deprecated in favor of `config.toml`
note: if you need to support cargo 1.38 or earlier, you can symlink `config` to `config.toml`
warning: `/Users/zoujiaqing/.cargo/config` is deprecated in favor of `config.toml`
note: if you need to support cargo 1.38 or earlier, you can symlink `config` to `config.toml`
warning: unused import: `LockFreeCounter`
  --> src/transport/pool.rs:25:75
   |
25 | use crate::transport::lockfree_enhanced::{LockFreeHashMap, LockFreeQueue, LockFreeCounter};
   |                                                                           ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `BufferSize` and `MemoryPoolEvent`
  --> src/transport/pool.rs:27:91
   |
27 | ... OptimizedMemoryStatsSnapshot, MemoryPoolEvent, BufferSize};
   |                                   ^^^^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/transport/client.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ProtocolConfig`, `command::TransportStats`, `expert_config::ExpertConfig`, and `packet::Packet`
  --> src/transport/client.rs:15:9
   |
15 |         expert_config::ExpertConfig,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |     },
17 |     protocol::{ProtocolConfig, adapter::DynProtocolConfig},
   |                ^^^^^^^^^^^^^^
18 |     stream::EventStream,
19 |     packet::Packet,
   |     ^^^^^^^^^^^^^^
20 |     command::TransportStats,
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/transport/server.rs:6:5
  |
6 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `AtomicU64` and `Ordering`
 --> src/transport/server.rs:7:25
  |
7 | use std::sync::atomic::{AtomicU64, Ordering};
  |                         ^^^^^^^^^  ^^^^^^^^

warning: unused import: `tokio::sync::Mutex`
 --> src/transport/server.rs:8:5
  |
8 | use tokio::sync::Mutex;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/transport/server.rs:9:5
  |
9 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Receiver as CrossbeamReceiver`, `Sender as CrossbeamSender`, and `unbounded as crossbeam_unbounded`
  --> src/transport/server.rs:10:25
   |
10 | ...::{unbounded as crossbeam_unbounded, Receiver as CrossbeamReceiver, Sender as CrossbeamSende...
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `lockfree_enhanced::LockFreeHashMap`, `protocol::Server`, and `stream::EventStream`
  --> src/transport/server.rs:15:42
   |
15 |     transport::{config::TransportConfig, lockfree_enhanced::LockFreeHashMap},
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |     protocol::{adapter::ServerConfig, protocol::Server},
   |                                       ^^^^^^^^^^^^^^^^
17 |     stream::EventStream,
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::transport::Transport`
  --> src/transport/server.rs:22:5
   |
22 | use super::transport::Transport;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `expert_config::ExpertConfig`
  --> src/transport/transport.rs:17:9
   |
17 |         expert_config::ExpertConfig,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Guard` and `Shared`
  --> src/transport/lockfree_enhanced.rs:14:45
   |
14 | use crossbeam::epoch::{self, Atomic, Owned, Shared, Guard};
   |                                             ^^^^^^  ^^^^^

warning: unused import: `parking_lot::RwLock`
  --> src/transport/lockfree_enhanced.rs:17:5
   |
17 | use parking_lot::RwLock;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `SessionId`
  --> src/transport/lockfree_enhanced.rs:19:13
   |
19 | use crate::{SessionId, error::TransportError};
   |             ^^^^^^^^^

warning: unused import: `tokio::time::timeout`
  --> src/transport/protocol_adapter_v2.rs:13:5
   |
13 | use tokio::time::timeout;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ConnectionState`, `PacketType`, and `ProtocolType`
  --> src/adapters/websocket.rs:15:31
   |
15 |     command::{ConnectionInfo, ProtocolType, ConnectionState},
   |                               ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^
16 |     error::TransportError,
17 |     packet::{Packet, PacketType},
   |                      ^^^^^^^^^^

warning: unexpected `cfg` condition value: `examples`
   --> src/adapters/quic.rs:479:17
    |
479 | #[cfg(any(test, feature = "examples"))]
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default`, `flate2`, `quic`, `tcp`, `websocket`, and `zstd`
    = help: consider adding `examples` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused imports: `Incoming`, `RecvStream`, and `SendStream`
 --> src/adapters/quic.rs:3:55
  |
3 |     Endpoint, ServerConfig, ClientConfig, Connection, RecvStream, SendStream,
  |                                                       ^^^^^^^^^^  ^^^^^^^^^^
4 |     ConnectError, ConnectionError, ReadError, WriteError, ClosedStream, ReadToEndError,
5 |     Incoming,
  |     ^^^^^^^^

warning: unused imports: `PrivateKeyDer` and `RootCertStore`
 --> src/adapters/quic.rs:8:33
  |
8 |     pki_types::{CertificateDer, PrivateKeyDer, PrivatePkcs8KeyDer, ServerName},
  |                                 ^^^^^^^^^^^^^
9 |     RootCertStore,
  |     ^^^^^^^^^^^^^

warning: unused import: `tokio::sync::Mutex`
  --> src/adapters/quic.rs:14:5
   |
14 | use tokio::sync::Mutex;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `quic` and `websocket`
  --> src/adapters/factories.rs:13:18
   |
13 | use super::{tcp, websocket, quic};
   |                  ^^^^^^^^^  ^^^^

warning: unused import: `crate::error::TransportError`
 --> src/protocol/client_config.rs:7:5
  |
7 | use crate::error::TransportError;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/transport/pool.rs:259:34
    |
259 |     pub async fn initialize_pool(mut self) -> Result<Self, TransportError> {
    |                                  ----^^^^
    |                                  |
    |                                  help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/transport/client.rs:215:24
    |
215 |     pub async fn build(mut self) -> Result<TransportClient, TransportError> {
    |                        ----^^^^
    |                        |
    |                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/transport/server.rs:176:24
    |
176 |     pub async fn build(mut self) -> Result<TransportServer, TransportError> {
    |                        ----^^^^
    |                        |
    |                        help: remove this `mut`

warning: unused variable: `session_id`
   --> src/transport/transport_server.rs:151:44
    |
151 |         let _ = self.connections.for_each(|session_id, connection| {
    |                                            ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session_id`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `connection`
   --> src/transport/transport_server.rs:151:56
    |
151 |         let _ = self.connections.for_each(|session_id, connection| {
    |                                                        ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connection`

warning: variable does not need to be mutable
   --> src/transport/actor_v2.rs:197:36
    |
197 |     pub async fn run_dual_pipeline(mut self) -> Result<(), TransportError> 
    |                                    ----^^^^
    |                                    |
    |                                    help: remove this `mut`

warning: unused variable: `transport`
   --> src/protocol/client_config.rs:811:29
    |
811 | ...f, transport: &mut crate::transport::transport::Transport) -> Result<crate::SessionId, cr...
    |       ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transport`

warning: unused variable: `transport`
   --> src/protocol/client_config.rs:835:29
    |
835 | ...f, transport: &mut crate::transport::transport::Transport) -> Result<crate::SessionId, cr...
    |       ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transport`

warning: unused import: `adapter::ServerConfig`
  --> src/transport/server.rs:16:16
   |
16 |     protocol::{adapter::ServerConfig, protocol::Server},
   |                ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ProtocolAdapter`
  --> src/transport/transport.rs:19:34
   |
19 |     protocol::{ProtocolRegistry, ProtocolAdapter, Connection},
   |                                  ^^^^^^^^^^^^^^^

warning: unused import: `protocol::adapter::DynServerConfig`
  --> src/transport/transport_server.rs:13:5
   |
13 |     protocol::adapter::DynServerConfig,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AsyncWriteExt`
  --> src/adapters/quic.rs:15:31
   |
15 | use tokio::io::{AsyncReadExt, AsyncWriteExt};
   |                               ^^^^^^^^^^^^^

warning: unused import: `AsyncReadExt`
  --> src/adapters/quic.rs:15:17
   |
15 | use tokio::io::{AsyncReadExt, AsyncWriteExt};
   |                 ^^^^^^^^^^^^

warning: unused variable: `error`
   --> src/error.rs:202:13
    |
202 |     fn from(error: String) -> Self {
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `adapter`
   --> src/connection.rs:153:13
    |
153 |         let adapter = self.inner.accept().await.map_err(|e| {
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_adapter`

warning: type `adapters::tcp::TcpServer` is more private than the item `TcpServerWrapper::new`
   --> src/adapters/factories.rs:119:5
    |
119 |     pub fn new(server: tcp::TcpServer) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function `TcpServerWrapper::new` is reachable at visibility `pub`
    |
note: but type `adapters::tcp::TcpServer` is only usable at visibility `pub(crate)`
   --> src/adapters/tcp.rs:470:1
    |
470 | pub(crate) struct TcpServer {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(private_interfaces)]` on by default

warning: type `WebSocketServer<WebSocketServerConfig>` is more private than the item `WebSocketServerWrapper::new`
   --> src/adapters/factories.rs:292:5
    |
292 |     pub fn new(server: crate::adapters::websocket::WebSocketServer<crate::protocol::WebSocketServerConfig>) -> Sel...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function `WebSocketServerWrapper::new` is reachable at visibility `pub`
    |
note: but type `WebSocketServer<WebSocketServerConfig>` is only usable at visibility `pub(crate)`
   --> src/adapters/websocket.rs:227:1
    |
227 | pub(crate) struct WebSocketServer<C> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: type `QuicServer` is more private than the item `QuicServerWrapper::new`
   --> src/adapters/factories.rs:463:5
    |
463 |     pub fn new(server: crate::adapters::quic::QuicServer) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function `QuicServerWrapper::new` is reachable at visibility `pub`
    |
note: but type `QuicServer` is only usable at visibility `pub(crate)`
   --> src/adapters/quic.rs:449:1
    |
449 | pub(crate) struct QuicServer {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: type `adapters::tcp::TcpServer` is more private than the item `connection::TcpServer::new`
   --> src/connection.rs:143:5
    |
143 |     pub fn new(inner: crate::adapters::tcp::TcpServer) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function `connection::TcpServer::new` is reachable at visibility `pub`
    |
note: but type `adapters::tcp::TcpServer` is only usable at visibility `pub(crate)`
   --> src/adapters/tcp.rs:470:1
    |
470 | pub(crate) struct TcpServer {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
   --> src/transport/pool.rs:635:8
    |
634 | impl PoolStats {
    | -------------- associated function in this implementation
635 |     fn new() -> Self {
    |        ^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: fields `timestamp`, `from_size`, `to_size`, and `factor` are never read
   --> src/transport/pool.rs:668:5
    |
667 | struct ExpansionEvent {
    |        -------------- fields in this struct
668 |     timestamp: Instant,
    |     ^^^^^^^^^
669 |     from_size: usize,
    |     ^^^^^^^^^
670 |     to_size: usize,
    |     ^^^^^^^
671 |     factor: f64,
    |     ^^^^^^
    |
    = note: `ExpansionEvent` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `timestamp`, `from_size`, `to_size`, and `factor` are never read
   --> src/transport/pool.rs:677:5
    |
676 | struct ShrinkEvent {
    |        ----------- fields in this struct
677 |     timestamp: Instant,
    |     ^^^^^^^^^
678 |     from_size: usize,
    |     ^^^^^^^^^
679 |     to_size: usize,
    |     ^^^^^^^
680 |     factor: f64,
    |     ^^^^^^
    |
    = note: `ShrinkEvent` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: method `update_metrics` is never used
   --> src/transport/pool.rs:748:14
    |
692 | impl PerformanceMonitor {
    | ----------------------- method in this implementation
...
748 |     async fn update_metrics(&self) {
    |              ^^^^^^^^^^^^^^

warning: field `stats` is never read
   --> src/transport/actor_v2.rs:538:5
    |
535 | pub struct ActorManager {
    |            ------------ field in this struct
...
538 |     stats: Arc<LockFreeActorStats>,
    |     ^^^^^

warning: associated function `builder` is never used
   --> src/adapters/tcp.rs:476:19
    |
475 | impl TcpServer {
    | -------------- associated function in this implementation
476 |     pub(crate) fn builder() -> TcpServerBuilder {
    |                   ^^^^^^^

warning: field `config` is never read
  --> src/adapters/websocket.rs:51:5
   |
50 | pub struct WebSocketAdapter<C> {
   |            ---------------- field in this struct
51 |     config: C,
   |     ^^^^^^

warning: field `config` is never read
   --> src/adapters/quic.rs:169:5
    |
167 | pub struct QuicAdapter<C> {
    |            ----------- field in this struct
168 |     session_id: SessionId,
169 |     config: C,
    |     ^^^^^^

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
  --> src/transport/client.rs:28:5
   |
28 |     async fn connect(&self, transport: &mut Transport) -> Result<SessionId, TransportError>;
   |     ^^^^^
   |
   = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
   = note: `#[warn(async_fn_in_trait)]` on by default
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
   |
28 -     async fn connect(&self, transport: &mut Transport) -> Result<SessionId, TransportError>;
28 +     fn connect(&self, transport: &mut Transport) -> impl std::future::Future<Output = Result<SessionId, TransportError>> + Send;
   |

warning: unused `std::result::Result` that must be used
   --> src/transport/transport_server.rs:130:9
    |
130 |         self.connections.insert(session_id, wrapped_connection);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
130 |         let _ = self.connections.insert(session_id, wrapped_connection);
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> src/transport/transport_server.rs:131:9
    |
131 |         self.stats.insert(session_id, TransportStats::new());
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
131 |         let _ = self.stats.insert(session_id, TransportStats::new());
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> src/transport/transport_server.rs:139:9
    |
139 |         self.connections.remove(&session_id);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
139 |         let _ = self.connections.remove(&session_id);
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> src/transport/transport_server.rs:140:9
    |
140 |         self.stats.remove(&session_id);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
140 |         let _ = self.stats.remove(&session_id);
    |         +++++++

warning: `msgtrans` (lib) generated 55 warnings (run `cargo fix --lib -p msgtrans` to apply 26 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.37s
     Running `target/debug/examples/echo_server_new_api`
🎯 Echo服务器 - 新API设计演示
=============================
📋 使用模式A：先定义事件处理，后启动服务器

[2m2025-06-11T21:38:21.820787Z[0m [32m INFO[0m [2mmsgtrans::transport::server[0m[2m:[0m ✅ TransportServer 构建完成，已包含协议配置
✅ TCP服务器创建完成: 127.0.0.1:8001
📡 事件流创建完成 - 服务器尚未启动
🚀 事件处理任务已启动
🌐 现在启动服务器...

🎯 测试方法:
   在另一个终端运行: cargo run --example echo_client_tcp_new
   或使用: telnet 127.0.0.1 8001

🎧 开始监听事件...
[2m2025-06-11T21:38:21.821088Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🌟 启动 1 个协议服务器
[2m2025-06-11T21:38:21.821096Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔧 处理协议: tcp
[2m2025-06-11T21:38:21.821100Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📍 协议 tcp 的绑定地址: 127.0.0.1:8001
[2m2025-06-11T21:38:21.821122Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🚀 TCP服务器启动在: 127.0.0.1:8001
[2m2025-06-11T21:38:21.821187Z[0m [32m INFO[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m ✅ TCP服务器成功启动在: 127.0.0.1:8001
[2m2025-06-11T21:38:21.821221Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ tcp 服务器启动成功: 127.0.0.1:8001
[2m2025-06-11T21:38:21.821227Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🎯 所有协议服务器启动完成，等待连接...
[2m2025-06-11T21:38:21.821231Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ⏳ 等待第 1 个监听任务完成...
[2m2025-06-11T21:38:21.821252Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🚀 tcp 监听任务已启动
[2m2025-06-11T21:38:21.821288Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔄 tcp 等待连接... (接受计数: 0)
[2m2025-06-11T21:38:42.084806Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔗 TCP新连接来自: 127.0.0.1:62714
[2m2025-06-11T21:38:42.084840Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🎉 tcp accept 成功! 连接 #1
[2m2025-06-11T21:38:42.084975Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔗 新的 tcp 连接 #1: 127.0.0.1:62714
[2m2025-06-11T21:38:42.084983Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🆔 为 tcp 连接生成会话ID: session-0
[2m2025-06-11T21:38:42.085047Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ TransportServer 添加会话: session-1
[2m2025-06-11T21:38:42.085071Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📨 tcp 连接事件已发送
[2m2025-06-11T21:38:42.085102Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔄 tcp 等待连接... (接受计数: 1)
[2m2025-06-11T21:38:42.085122Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📥 消息接收循环开始: session-1
📥 事件 #1: ConnectionEstablished { session_id: SessionId(1), info: ConnectionInfo { session_id: SessionId(0), local_addr: 127.0.0.1:8001, peer_addr: 127.0.0.1:62714, protocol: Tcp, state: Connected, established_at: SystemTime { tv_sec: 1749677922, tv_nsec: 84831000 }, closed_at: None, last_activity: SystemTime { tv_sec: 1749677922, tv_nsec: 84831000 }, packets_sent: 0, packets_received: 0, bytes_sent: 0, bytes_received: 0 } }
🔗 新连接建立: session-1 <- 127.0.0.1:62714 (协议: Tcp)
   当前连接数: 1
[2m2025-06-11T21:38:42.085151Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP read_packet - 开始尝试读取数据包
[2m2025-06-11T21:38:42.085158Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始读取9字节包头...
[2m2025-06-11T21:38:42.085877Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取包头9字节
[2m2025-06-11T21:38:42.085892Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP读取到包头: [1, 0, 0, 0, 1, 0, 0, 0, 23]
[2m2025-06-11T21:38:42.085897Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 解析出负载长度: 23 bytes
[2m2025-06-11T21:38:42.085917Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取负载: 23 bytes
[2m2025-06-11T21:38:42.085929Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 重构数据包，总长度: 32 bytes
[2m2025-06-11T21:38:42.085934Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功解析数据包: 类型=Data, ID=1, 负载=23bytes
[2m2025-06-11T21:38:42.085941Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📥 收到消息: 23 bytes (会话: session-1)
[2m2025-06-11T21:38:42.085947Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ MessageReceived 事件已发送: session-1
[2m2025-06-11T21:38:42.085961Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP read_packet - 开始尝试读取数据包
[2m2025-06-11T21:38:42.085967Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始读取9字节包头...
📥 事件 #2: MessageReceived { session_id: SessionId(1), packet: Packet { packet_type: Data, message_id: 1, payload: b"Hello, TransportClient!" } }
📨 收到消息:
   会话: session-1
   消息ID: 1
   大小: 23 bytes
   内容: "Hello, TransportClient!"
🔄 准备发送回显:
   目标会话: session-1
   回显ID: 1001
   回显内容: "Echo: Hello, TransportClient!"
[2m2025-06-11T21:38:42.086150Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📤 TransportServer 向会话 session-1 发送数据包 (ID: 1001, 大小: 29 bytes)
[2m2025-06-11T21:39:12.089567Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取包头9字节
[2m2025-06-11T21:39:12.089584Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP读取到包头: [1, 0, 0, 0, 2, 0, 0, 0, 27]
[2m2025-06-11T21:39:12.089590Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 解析出负载长度: 27 bytes
[2m2025-06-11T21:39:12.089598Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取负载: 27 bytes
[2m2025-06-11T21:39:12.089605Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 重构数据包，总长度: 36 bytes
[2m2025-06-11T21:39:12.089610Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功解析数据包: 类型=Data, ID=2, 负载=27bytes
[2m2025-06-11T21:39:12.089618Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📥 收到消息: 27 bytes (会话: session-1)
[2m2025-06-11T21:39:12.089627Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ MessageReceived 事件已发送: session-1
[2m2025-06-11T21:39:12.089655Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔍 会话 session-1 连接状态正常，开始发送数据包
[2m2025-06-11T21:39:12.089661Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP适配器开始发送数据包: ID=1001, 大小=29bytes
[2m2025-06-11T21:39:12.089668Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 数据包序列化后大小: 38bytes
[2m2025-06-11T21:39:12.089673Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始写入TCP socket...
[2m2025-06-11T21:39:12.089690Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP write_all 成功，开始flush...
[2m2025-06-11T21:39:12.089695Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP flush 成功，数据包发送完成
[2m2025-06-11T21:39:12.089700Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ 会话 session-1 TCP层发送成功 (TransportServer层确认)
✅ 回显发送成功 -> 会话 session-1
📥 事件 #3: MessageReceived { session_id: SessionId(1), packet: Packet { packet_type: Data, message_id: 2, payload: b"\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa0\x87\xe5\x87\x86\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe5\x8d\x8f\xe8\xae\xae" } }
📨 收到消息:
   会话: session-1
   消息ID: 2
   大小: 27 bytes
   内容: "测试标准客户端协议"
🔄 准备发送回显:
   目标会话: session-1
   回显ID: 1002
   回显内容: "Echo: 测试标准客户端协议"
[2m2025-06-11T21:39:12.089725Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📤 TransportServer 向会话 session-1 发送数据包 (ID: 1002, 大小: 33 bytes)
[2m2025-06-11T21:39:12.089735Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP read_packet - 开始尝试读取数据包
[2m2025-06-11T21:39:12.089740Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始读取9字节包头...
[2m2025-06-11T21:39:14.092109Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取包头9字节
[2m2025-06-11T21:39:14.092130Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP读取到包头: [1, 0, 0, 0, 3, 0, 0, 0, 27]
[2m2025-06-11T21:39:14.092136Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 解析出负载长度: 27 bytes
[2m2025-06-11T21:39:14.092146Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取负载: 27 bytes
[2m2025-06-11T21:39:14.092153Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 重构数据包，总长度: 36 bytes
[2m2025-06-11T21:39:14.092159Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功解析数据包: 类型=Data, ID=3, 负载=27bytes
[2m2025-06-11T21:39:14.092168Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📥 收到消息: 27 bytes (会话: session-1)
[2m2025-06-11T21:39:14.092179Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ MessageReceived 事件已发送: session-1
[2m2025-06-11T21:39:14.092204Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔍 会话 session-1 连接状态正常，开始发送数据包
[2m2025-06-11T21:39:14.092211Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP适配器开始发送数据包: ID=1002, 大小=33bytes
[2m2025-06-11T21:39:14.092217Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 数据包序列化后大小: 42bytes
[2m2025-06-11T21:39:14.092223Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始写入TCP socket...
[2m2025-06-11T21:39:14.092242Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP write_all 成功，开始flush...
[2m2025-06-11T21:39:14.092247Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP flush 成功，数据包发送完成
[2m2025-06-11T21:39:14.092254Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ 会话 session-1 TCP层发送成功 (TransportServer层确认)
✅ 回显发送成功 -> 会话 session-1
📥 事件 #4: MessageReceived { session_id: SessionId(1), packet: Packet { packet_type: Data, message_id: 3, payload: b"Message with numbers: 12345" } }
📨 收到消息:
   会话: session-1
   消息ID: 3
   大小: 27 bytes
   内容: "Message with numbers: 12345"
🔄 准备发送回显:
   目标会话: session-1
   回显ID: 1003
   回显内容: "Echo: Message with numbers: 12345"
[2m2025-06-11T21:39:14.092282Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📤 TransportServer 向会话 session-1 发送数据包 (ID: 1003, 大小: 33 bytes)
[2m2025-06-11T21:39:14.092294Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP read_packet - 开始尝试读取数据包
[2m2025-06-11T21:39:14.092299Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始读取9字节包头...
[2m2025-06-11T21:39:16.094871Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取包头9字节
[2m2025-06-11T21:39:16.094894Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP读取到包头: [1, 0, 0, 0, 4, 0, 0, 0, 23]
[2m2025-06-11T21:39:16.094900Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 解析出负载长度: 23 bytes
[2m2025-06-11T21:39:16.094911Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功读取负载: 23 bytes
[2m2025-06-11T21:39:16.094933Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 重构数据包，总长度: 32 bytes
[2m2025-06-11T21:39:16.094943Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 成功解析数据包: 类型=Data, ID=4, 负载=23bytes
[2m2025-06-11T21:39:16.094976Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📥 收到消息: 23 bytes (会话: session-1)
[2m2025-06-11T21:39:16.095018Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ MessageReceived 事件已发送: session-1
[2m2025-06-11T21:39:16.095057Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔍 会话 session-1 连接状态正常，开始发送数据包
[2m2025-06-11T21:39:16.095066Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP适配器开始发送数据包: ID=1003, 大小=33bytes
[2m2025-06-11T21:39:16.095072Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 数据包序列化后大小: 42bytes
[2m2025-06-11T21:39:16.095078Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始写入TCP socket...
[2m2025-06-11T21:39:16.095093Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP write_all 成功，开始flush...
[2m2025-06-11T21:39:16.095101Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP flush 成功，数据包发送完成
[2m2025-06-11T21:39:16.095107Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ✅ 会话 session-1 TCP层发送成功 (TransportServer层确认)
✅ 回显发送成功 -> 会话 session-1
📥 事件 #5: MessageReceived { session_id: SessionId(1), packet: Packet { packet_type: Data, message_id: 4, payload: b"Message #4 - Final test" } }
📨 收到消息:
   会话: session-1
   消息ID: 4
   大小: 23 bytes
   内容: "Message #4 - Final test"
🔄 准备发送回显:
   目标会话: session-1
   回显ID: 1004
   回显内容: "Echo: Message #4 - Final test"
[2m2025-06-11T21:39:16.095142Z[0m [34mDEBUG[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📤 TransportServer 向会话 session-1 发送数据包 (ID: 1004, 大小: 29 bytes)
[2m2025-06-11T21:39:16.095152Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 TCP read_packet - 开始尝试读取数据包
[2m2025-06-11T21:39:16.095156Z[0m [34mDEBUG[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔍 开始读取9字节包头...
[2m2025-06-11T21:39:19.096554Z[0m [32m INFO[0m [2mmsgtrans::adapters::tcp[0m[2m:[0m 🔗 TCP连接已被对端关闭: Connection reset by peer (os error 54)
[2m2025-06-11T21:39:19.097631Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🔚 连接已关闭: session-1
[2m2025-06-11T21:39:19.097658Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 📥 消息接收循环结束，清理会话: session-1
[2m2025-06-11T21:39:19.097692Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🗑️ TransportServer 移除会话: session-1
[2m2025-06-11T21:39:19.097974Z[0m [33m WARN[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m ⚠️ 会话 session-1 连接已断开，跳过发送
[2m2025-06-11T21:39:19.097992Z[0m [32m INFO[0m [2mmsgtrans::transport::transport_server[0m[2m:[0m 🗑️ TransportServer 移除会话: session-1
❌ 回显发送失败: Connection { reason: "Connection closed", retryable: false }
📥 事件 #6: ConnectionClosed { session_id: SessionId(1), reason: Error("Connection closed") }
🔌 连接关闭: session-1 (原因: Error("Connection closed"))
   剩余连接数: 0
