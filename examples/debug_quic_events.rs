/// 调试QUIC事件流问题
/// 
/// 测试QUIC适配器的事件流是否正常工作

use msgtrans::adapters::quic::{QuicAdapter, QuicServer};
use msgtrans::protocol::{QuicServerConfig, QuicClientConfig};
use std::net::SocketAddr;\nuse tokio::time::{sleep, Duration};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::DEBUG)\n        .init();\n    \n    println!(\"🔍 调试QUIC事件流问题\");\n    \n    // 1. 创建QUIC服务器\n    let mut server = QuicServer::builder()\n        .bind_address(\"127.0.0.1:12346\".parse()?)\n        .config(QuicServerConfig::default())\n        .build()\n        .await?;\n    \n    println!(\"✅ QUIC服务器创建成功\");\n    \n    // 2. 在后台启动服务器接受连接\n    let server_task = tokio::spawn(async move {\n        println!(\"📡 等待客户端连接...\");\n        match server.accept().await {\n            Ok(adapter) => {\n                println!(\"✅ 服务器接受连接成功\");\n                \n                // 测试subscribe_events方法\n                println!(\"🔍 测试subscribe_events方法...\");\n                let mut receiver = adapter.subscribe_events();\n                println!(\"✅ subscribe_events调用成功\");\n                \n                // 尝试接收事件\n                println!(\"📡 等待事件...\");\n                match tokio::time::timeout(Duration::from_secs(5), receiver.recv()).await {\n                    Ok(Ok(event)) => {\n                        println!(\"📥 收到事件: {:?}\", event);\n                    }\n                    Ok(Err(e)) => {\n                        println!(\"❌ 接收事件错误: {:?}\", e);\n                    }\n                    Err(_) => {\n                        println!(\"⏰ 等待事件超时\");\n                    }\n                }\n            }\n            Err(e) => {\n                println!(\"❌ 服务器接受连接失败: {:?}\", e);\n            }\n        }\n    });\n    \n    // 3. 等待一下让服务器启动\n    sleep(Duration::from_millis(100)).await;\n    \n    // 4. 创建客户端连接\n    println!(\"🔌 创建客户端连接...\");\n    let client = QuicAdapter::connect(\"127.0.0.1:12346\".parse()?, QuicClientConfig::default()).await?;\n    println!(\"✅ 客户端连接成功\");\n    \n    // 5. 等待服务器任务完成\n    server_task.await?;\n    \n    println!(\"🎉 调试测试完成\");\n    Ok(())\n} 