/// 简单的QUIC调试测试
/// 
/// 测试QUIC适配器的事件流是否正常工作

use msgtrans::{\n    transport::{TransportServerBuilder, TransportClientBuilder}, \n    protocol::{QuicServerConfig, QuicClientConfig},\n};\nuse std::time::Duration;\nuse tokio::time::sleep;\nuse futures_util::StreamExt;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::DEBUG)\n        .init();\n    \n    println!(\"🔍 简单QUIC调试测试\");\n    \n    // 1. 创建QUIC服务器\n    let quic_server_config = QuicServerConfig {\n        bind_address: \"127.0.0.1:12347\".parse().unwrap(),\n        ..Default::default()\n    };\n    \n    let server = TransportServerBuilder::new()\n        .with_protocol(quic_server_config)\n        .build()\n        .await?;\n    \n    println!(\"✅ QUIC服务器创建成功\");\n    \n    // 2. 启动服务器\n    let server_task = {\n        let server = server.clone();\n        tokio::spawn(async move {\n            if let Err(e) = server.serve().await {\n                eprintln!(\"❌ 服务器错误: {:?}\", e);\n            }\n        })\n    };\n    \n    // 3. 等待服务器启动\n    sleep(Duration::from_millis(100)).await;\n    \n    // 4. 创建客户端\n    let quic_client_config = QuicClientConfig {\n        target_address: \"127.0.0.1:12347\".parse().unwrap(),\n        ..Default::default()\n    };\n    \n    let client = TransportClientBuilder::new()\n        .with_protocol(quic_client_config)\n        .build()\n        .await?;\n    \n    println!(\"✅ 客户端创建成功\");\n    \n    // 5. 获取服务器事件流\n    let mut server_events = server.events();\n    \n    // 6. 监听服务器事件\n    println!(\"📡 监听服务器事件...\");\n    \n    let mut event_count = 0;\n    while let Ok(event_result) = tokio::time::timeout(Duration::from_secs(3), server_events.next()).await {\n        match event_result {\n            Ok(event) => {\n                println!(\"📥 服务器事件: {:?}\", event);\n                event_count += 1;\n                \n                if event_count >= 2 {\n                    break;\n                }\n            }\n            Err(e) => {\n                eprintln!(\"❌ 服务器事件错误: {:?}\", e);\n                break;\n            }\n        }\n    }\n    \n    println!(\"🎉 调试测试完成，收到 {} 个事件\", event_count);\n    \n    // 清理\n    server_task.abort();\n    \n    Ok(())\n} 